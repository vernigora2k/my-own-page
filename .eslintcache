[{"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\index.js":"1","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\App.js":"2","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Portfolio.js":"3","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Contacts.js":"4","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Home.js":"5","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\components\\MainMenu.js":"6","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\reportWebVitals.js":"7","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\components\\MainTyped.js":"8","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Laboratory.js":"9","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\components\\Game.js":"10"},{"size":403,"mtime":1612348589677,"results":"11","hashOfConfig":"12"},{"size":1966,"mtime":1612438047662,"results":"13","hashOfConfig":"12"},{"size":514,"mtime":1612212440458,"results":"14","hashOfConfig":"12"},{"size":378,"mtime":1612260186707,"results":"15","hashOfConfig":"12"},{"size":1692,"mtime":1613860535690,"results":"16","hashOfConfig":"12"},{"size":789,"mtime":1612512868997,"results":"17","hashOfConfig":"12"},{"size":375,"mtime":1612275547066,"results":"18","hashOfConfig":"12"},{"size":2903,"mtime":1612539813919,"results":"19","hashOfConfig":"12"},{"size":516,"mtime":1612438002784,"results":"20","hashOfConfig":"12"},{"size":6281,"mtime":1614934102653,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"x8eskg",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\index.js",[],["49","50"],"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\App.js",["51","52"],"import React, { Fragment, useState } from 'react';\nimport {useTransition, animated} from 'react-spring';\nimport { BrowserRouter, Route, Switch, useLocation } from 'react-router-dom';\nimport { Home } from './pages/Home';\nimport { Portfolio } from './pages/Portfolio';\nimport { Contacts } from './pages/Contacts';\nimport MainMenu from './components/MainMenu';\nimport { Laboratory } from './pages/Laboratory';\n\nfunction App() {\n  const [isToggled, setIsToggled] = useState(false)\n\n  const location = useLocation()\n\n  const transition = useTransition(location, location => location.pathname, {\n    from: {\n      opacity: 0,\n      transform: 'translateX(100%)',\n    },\n    enter: {\n      opacity: 1,\n      transform: 'translateX(0%)',\n    },\n    leave: {\n      opacity: 0,\n      transform: 'translateX(-100%)',\n    },\n  })\n\n  const toggleHandler = () => {\n    setIsToggled(!isToggled)\n  }\n\n  return (\n    <section style={{position: 'relative', overflow: 'hidden', minHeight: '100vh'}}> \n      <div className=\"menu-button\">\n        <MainMenu toggled={isToggled} toggleHandler={toggleHandler}/>\n        {/* <button onClick={toggleHandler}>menu</button> */}\n        <div onClick={toggleHandler} id=\"nav-icon4\" className={\"menu-button__hamburger\" + (isToggled ? ' open' : '')}>\n          <span></span>\n          <span></span>\n          <span></span>\n        </div>\n      </div>\n      {\n        transition.map(({item, props, key}) => (\n          <animated.div key={key} style={props}>\n            <div style={{position: 'absolute', width: '100%'}}>\n              <Switch location={item}>\n                <Route exact path='/' component={Home} />\n                <Route path='/laboratory' component={Laboratory} />\n                <Route path='/portfolio' component={Portfolio} />\n                <Route path='/contacts' component={Contacts} />\n              </Switch>\n            </div>\n          </animated.div>\n        ))\n      } \n    </section>\n  );\n}\n\nexport default App;\n","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Portfolio.js",[],"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Contacts.js",["53"],"import React, { Fragment } from 'react';\r\n\r\nexport const Contacts = () => {\r\n    return (\r\n        <Fragment>\r\n            <h1>Contacts</h1>\r\n            <div className=\"video-container\">\r\n                <iframe width=\"853\" height=\"480\" src=\"//www.youtube.com/embed/Q8TXgCzxEnw?rel=0\" frameborder=\"0\" allowfullscreen></iframe>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Home.js",["54","55","56","57","58"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport './home.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport MainTyped from '../components/MainTyped';\r\nimport { Game } from '../components/Game';\r\n\r\nexport const Home = () => {\r\n    const [isShow, setIsShow] = useState(false)\r\n    const [isShowGame, setIsShowGame] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setIsShow(!isShow)\r\n        }, 2000)\r\n    }, [])\r\n\r\n    const startGame = () => {\r\n        setIsShowGame(!isShowGame)\r\n    }\r\n\r\n    return (\r\n        <section className=\"home\">\r\n            <MainTyped /> \r\n            <nav className={\"social\" + (isShow ? \" show-element\" : '')}>\r\n                <ul>\r\n                    <li><a href=\"https://www.linkedin.com/in/vernigora2k\" target=\"_blank\">Linkedin <i className=\"fa fa-linkedin\"></i></a></li>\r\n                    <li><a href=\"https://github.com/vernigora2k\" target=\"_blank\">Github <i className=\"fa fa-github\"></i></a></li>\r\n                    <li className=\"skype-share\" data-href=\"https://join.skype.com/invite/poAIogAm7Bhq\"><a href=\"#\">Skype <i className=\"fa fa-skype\"></i></a></li>\r\n                </ul>\r\n            </nav>\r\n            <Link to=\"/laboratory\">\r\n                <nav className={\"arrow-right\" + (isShow ? \" show-element\" : '')}>\r\n                    <div className=\"arrow-right__up\"></div>\r\n                    <div className=\"arrow-right__down\"></div>\r\n                </nav> \r\n            </Link>\r\n            <button onClick={startGame} className={\"home__game-btn\" + (isShow ? \" show-element\" : '')}>Destroy my page</button>\r\n            {isShowGame && <Game />}\r\n        </section>\r\n    )\r\n}","E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\components\\MainMenu.js",[],"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\reportWebVitals.js",[],"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\components\\MainTyped.js",["59"],"import React,{ Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport Typed from 'react-typed';\r\n\r\nexport default class MainTyped extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4 className=\"home__title\">\r\n                    <Typed\r\n                        strings={['Hello, my name is Pavlo Vernigora.']}\r\n                        typeSpeed={40}\r\n                        showCursor={false}\r\n                    />\r\n                </h4>\r\n                <br/>\r\n                <h6 className=\"home__description\">\r\n                    <Typed\r\n                        strings={['I am front-end web developer.']}\r\n                        typeSpeed={40}\r\n                        showCursor={false}\r\n                    />\r\n                </h6>\r\n                \r\n                <h6 className=\"home__description\">\r\n                    <Typed\r\n                        strings={['You can check out example of my code at the']}\r\n                        typeSpeed={40}\r\n                        showCursor={false}\r\n                    />&nbsp;\r\n                    <Link className=\"home__link link-flash\" to=\"/laboratory\">\r\n                        <Typed\r\n                            strings={['code laboratory.']}\r\n                            typeSpeed={40}\r\n                            startDelay={2600}\r\n                            showCursor={false}\r\n                        />\r\n                    </Link>\r\n                </h6>\r\n                \r\n                <h6 className=\"home__description\">\r\n                    <Typed\r\n                        strings={['Feel free to take a look at my projects on the']}\r\n                        typeSpeed={40}\r\n                        showCursor={false}\r\n                    />&nbsp;\r\n                    <Link className=\"home__link link-flash\" to=\"/portfolio\">\r\n                        <Typed\r\n                            strings={['portfolio page.']}\r\n                            typeSpeed={40}\r\n                            startDelay={2600}\r\n                            showCursor={false}\r\n                        />\r\n                    </Link>\r\n                </h6>\r\n                \r\n                <h6 className=\"home__description\">\r\n                    <Typed\r\n                        strings={['For any questions:']}\r\n                        typeSpeed={40}\r\n                        showCursor={false}\r\n                    />&nbsp;\r\n                    <span className=\"home__link link-flash\">\r\n                        <Typed\r\n                            strings={['vernigora2k@gmail.com']}\r\n                            typeSpeed={40}\r\n                            startDelay={2600}\r\n                            cursorChar=\"&#95;\"\r\n                        />\r\n                    </span>\r\n                </h6>\r\n            </div>\r\n        );\r\n    }\r\n}",["60","61"],"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\pages\\Laboratory.js",[],"E:\\Artem Dimitrov\\my-own-page\\my-own-page\\src\\components\\Game.js",["62","63","64"],"import React, { Fragment, useEffect, useRef, useState } from 'react';\r\nimport './game.scss';\r\n\r\ninterface CanvasProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport const Game = ({ width, height }: CanvasProps) => {\r\n    const canvasRef = useRef(null);\r\n    let context;\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            const canvas = canvasRef.current;\r\n            context = canvas.getContext('2d');  \r\n           \r\n            const x = canvas.width / 2\r\n            const y = canvas.height / 1.1\r\n            const player = new Player(x, y, 30, 'blue')\r\n            const projectiles = []\r\n            const enemies = []\r\n\r\n            function spawnEnemies() {\r\n                setInterval(() => {\r\n                    const x = Math.random() * canvas.width\r\n                    const y = 100\r\n                    const radius = Math.random() * (30 - 4) + 5\r\n                    const color = 'green'\r\n                    \r\n                    const angle = Math.atan2(\r\n                        canvas.height / 1.1 - y,           \r\n                        canvas.width / 2 - x\r\n                        )\r\n                    const velocity =  {\r\n                        x: Math.cos(angle),\r\n                        y: Math.sin(angle),\r\n                    }\r\n                    enemies.push(new Enemy(x, y, radius, color, velocity))\r\n                    console.log(enemies)\r\n                }, 1000)\r\n            }\r\n\r\n            function animate() {\r\n                requestAnimationFrame(animate)\r\n                context.clearRect(0, 0, canvas.width, canvas.height)\r\n                player.draw()\r\n\r\n                projectiles.forEach(projectile => {\r\n                    projectile.update()\r\n                })\r\n\r\n                enemies.forEach((enemy, index) => {\r\n                    enemy.update()\r\n\r\n                    projectiles.forEach((projectile, projectileIndex) => {\r\n                        const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                        \r\n                        //objects touch\r\n                        if (dist - enemy.radius - projectile.radius < 1) {\r\n                            setTimeout(() => {\r\n                                enemies.splice(index, 1)\r\n                                projectiles.splice(projectileIndex, 1)\r\n                            }, 0)\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            \r\n            window.addEventListener('click', (e) => {\r\n                const angle = Math.atan2(\r\n                    e.clientY - canvas.width / 2, \r\n                    e.clientX - canvas.width / 2\r\n                    )\r\n                const velocity =  {\r\n                    x: Math.cos(angle),\r\n                    y: Math.sin(angle),\r\n                }\r\n                projectiles.push(new Projectile(\r\n                    canvas.width / 2, \r\n                    canvas.height / 1.1, \r\n                    5, \r\n                    'red', \r\n                    velocity\r\n                ))\r\n            })\r\n\r\n            animate()\r\n            spawnEnemies()\r\n        }          \r\n    },[]);\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n    \r\n        draw() {\r\n            context.beginPath()\r\n            context.arc(this.x, this.y, this.radius, Math.PI * 2, false)\r\n            context.fillStyle = this.color\r\n            context.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            context.beginPath()\r\n            context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n            context.fillStyle = this.color\r\n            context.fill()\r\n        }\r\n\r\n        update()  {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            context.beginPath()\r\n            context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)\r\n            context.fillStyle = this.color\r\n            context.fill()\r\n        }\r\n\r\n        update()  {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return <canvas className=\"game\" ref={canvasRef} height={height} width={width} />;\r\n};\r\n\r\nGame.defaultProps = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight\r\n};\r\n\r\n\r\n\r\n// export const Game = () => {\r\n//     const canvasRef = useRef()\r\n//     console.log(canvasRef)\r\n//     let ctx\r\n//     // const ctx = canvasRef.current.getContext('2d')\r\n    \r\n//     useEffect(() => {\r\n//         const ctx = canvasRef.current.getContext('2d')\r\n//         console.log(ctx)\r\n//         // console.log(canvasRef.current.innerWidth)\r\n//         // console.log(document.innerWidth)\r\n        \r\n//         // const ctx = canvasRef.current.getContext('2d')\r\n//         // console.log(ctx)\r\n\r\n//         // canvasRef.current.width = innerWidth\r\n//         // canvasRef.current.height = innerHeight\r\n//     }, [])\r\n\r\n//     class Player {\r\n//         constructor(x, y, radius, color) {\r\n//             this.x = x\r\n//             this.y = y\r\n//             this.radius = radius\r\n//             this.color = color\r\n//         }\r\n\r\n//         draw() {\r\n//             ctx.beginPath()\r\n//             ctx.arc(this.x, this.y, this.radius, Math.PI * 2, false)\r\n//             ctx.fill()\r\n//         }\r\n//     }\r\n    \r\n//     const player = new Player(100, 100, 30, 'blue')\r\n//     console.log(player)\r\n//     // player.draw()\r\n\r\n//     return (\r\n//         <canvas className=\"game\" ref={canvasRef}>\r\n//             sldkjflsk\r\n//         </canvas>\r\n//     )\r\n// }",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"69","severity":1,"message":"73","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":23},{"ruleId":"74","severity":1,"message":"75","line":8,"column":17,"nodeType":"76","endLine":8,"endColumn":130},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"78","line":15,"column":8,"nodeType":"79","endLine":15,"endColumn":10,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":26,"column":25,"nodeType":"76","endLine":26,"endColumn":91},{"ruleId":"81","severity":1,"message":"82","line":27,"column":25,"nodeType":"76","endLine":27,"endColumn":82},{"ruleId":"83","severity":1,"message":"84","line":28,"column":104,"nodeType":"76","endLine":28,"endColumn":116},{"ruleId":"69","severity":1,"message":"85","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"65","replacedBy":"86"},{"ruleId":"67","replacedBy":"87"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"69","severity":1,"message":"88","line":1,"column":46,"nodeType":"71","messageId":"72","endLine":1,"endColumn":54},{"ruleId":"77","severity":1,"message":"89","line":16,"column":23,"nodeType":"90","endLine":16,"endColumn":46},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isShow'. Either include it or remove the dependency array. You can also do a functional update 'setIsShow(i => ...)' if you only need 'isShow' in the 'setIsShow' call.","ArrayExpression",["93"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'render' is defined but never used.",["91"],["92"],"'useState' is defined but never used.","Assignments to the 'context' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [isShow]",{"range":"96","text":"97"},[469,471],"[isShow]"]